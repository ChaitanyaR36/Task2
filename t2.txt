-- Create Products Table
CREATE TABLE Products (
    ProductID INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Category VARCHAR(50),
    Price DECIMAL(10, 2) NOT NULL,
    Stock INT NOT NULL
);

-- Create Customers Table
CREATE TABLE Customers (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Phone VARCHAR(15),
    Address TEXT
);

-- Create Orders Table
CREATE TABLE Orders (
    OrderID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    Status VARCHAR(20) DEFAULT 'Pending',
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Create OrderDetails Table
CREATE TABLE OrderDetails (
    OrderDetailID INT AUTO_INCREMENT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Create Payments Table
CREATE TABLE Payments (
    PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    OrderID INT,
    PaymentDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10, 2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Insert Sample Products
INSERT INTO Products (ProductName, Category, Price, Stock)
VALUES
('Laptop', 'Electronics', 800.00, 50),
('Phone', 'Electronics', 500.00, 100),
('Headphones', 'Accessories', 50.00, 200);

-- Insert Sample Customers
INSERT INTO Customers (FullName, Email, Phone, Address)
VALUES
('Alice Johnson', 'alice@gmail.com', '1234567890', '123 Maple Street'),
('Bob Smith', 'bob@gmail.com', '9876543210', '456 Oak Avenue');

-- Insert a New Order
INSERT INTO Orders (CustomerID, TotalAmount)
VALUES (1, 850.00);

-- Add Products to the Order (Order Details)
INSERT INTO OrderDetails (OrderID, ProductID, Quantity, Price)
VALUES
(1, 1, 1, 800.00),  -- 1 Laptop
(1, 3, 1, 50.00);   -- 1 Headphone

-- Update Stock After Order
UPDATE Products
SET Stock = Stock - 1
WHERE ProductID = 1;  -- Reduce stock for Laptop

-- Process a Payment
INSERT INTO Payments (OrderID, PaymentMethod, Amount)
VALUES (1, 'Credit Card', 850.00);

-- Retrieve Order Summary
SELECT o.OrderID, c.FullName, o.OrderDate, p.ProductName, od.Quantity, od.Price
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE o.OrderID = 1;

-- List All Orders by a Specific Customer
SELECT o.OrderID, o.OrderDate, o.TotalAmount, o.Status
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.Email = 'alice@gmail.com';

-- Check Product Availability
SELECT ProductName, Stock
FROM Products
WHERE Stock > 0;

-- Get Total Sales by Product
SELECT p.ProductName, SUM(od.Quantity) AS TotalSold, SUM(od.Price * od.Quantity) AS TotalRevenue
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductName;

-- Find Customers with Total Spending Above a Certain Amount
SELECT c.FullName, SUM(o.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.FullName
HAVING TotalSpent > 1000;

-- Show Pending Orders
SELECT o.OrderID, c.FullName, o.OrderDate, o.TotalAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE o.Status = 'Pending';
